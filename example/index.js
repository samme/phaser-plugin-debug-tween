// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var Back, Bounce, Phaser, Quadratic, Rectangle, WHITE, YELLOW, dat, onDown, onUp, tweenGui;

  dat = this.dat, Phaser = this.Phaser;

  Back = Phaser.Easing.Back;

  Bounce = Phaser.Easing.Bounce;

  Quadratic = Phaser.Easing.Quadratic;

  Rectangle = Phaser.Rectangle;

  YELLOW = 0xffff00;

  WHITE = 0xffffff;

  onDown = function(sprite) {
    sprite.tint = YELLOW;
  };

  onUp = function(sprite) {
    sprite.tint = WHITE;
    switch (sprite.text) {
      case "Start":
        this.tween.start();
        break;
      case "Stop":
        this.tween.stop();
        break;
      case "Pause":
        this.tween.pause();
        break;
      case "Resume":
        this.tween.resume();
    }
  };

  tweenGui = function(tween) {
    var gui;
    gui = new dat.GUI;
    gui.add(tween, "frameBased");
    gui.add(tween, "pendingDelete").listen();
    gui.add(tween, "loop");
    gui.add(tween, "pause");
    gui.add(tween, "repeatAll");
    gui.add(tween, "repeatCounter").listen();
    gui.add(tween, "resume");
    gui.add(tween, "reverse");
    gui.add(tween, "start");
    gui.add(tween, "stop");
    gui.add(tween, "timeScale", 0.25, 2, 0.25);
    return gui;
  };

  window.game = new Phaser.Game({
    antialias: false,
    width: 960,
    height: 1080,
    renderer: Phaser.CANVAS,
    scaleMode: Phaser.ScaleManager.NO_SCALE,
    state: {
      init: function() {
        var debug;
        this.game.plugins.add(Phaser.Plugin.DebugTween);
        debug = this.game.debug;
        debug.font = "16px monospace";
        debug.lineHeight = 20;
      },
      preload: function() {
        this.load.image("bunny", "example/bunny.png");
      },
      create: function() {
        var TURN, centerX, centerY;
        centerX = this.world.centerX;
        centerY = this.world.centerY;
        TURN = 2 * Math.PI;
        this.sprite = this.add.sprite(centerX, -centerY, "bunny");
        this.sprite.anchor.set(0.5);
        this.tween = this.add.tween(this.sprite).to({
          y: 1.5 * centerY
        }, 1500, Bounce.Out).to({
          rotation: 1 * TURN,
          x: 2 * centerX
        }, 1000, Back.InOut).to({
          rotation: 0,
          x: centerX
        }, 1000, Back.InOut, false, 500).to({
          alpha: 0,
          y: 2 * centerY
        }, 500, Quadratic.In);
        this.tween.timeScale = 0.5;
        this.time.events.add(250, (function() {
          this.gui = tweenGui(this.tween);
        }), this);
        this.columns = [new Rectangle(0, 320, 320, 320).inflate(-20, 0), new Rectangle(320, 320, 320, 320).inflate(-20, 0), new Rectangle(640, 320, 320, 320).inflate(-20, 0)];
        this.input.onUp.add((function() {
          return this.tween.start();
        }), this);
        window.tween = this.tween;
        console.log("window.tween", this.tween);
      },
      render: function() {
        var current, debug;
        debug = this.game.debug;
        current = this.tween.timeline[this.tween.current];
        this.debugText("Click to start the tween or → use tween controls →", 20, 20, "#7FDBFF");
        debug.tween(this.tween, 20, 120);
        debug.tweenInfo(this.tween, this.columns[0].x, this.columns[0].y);
        debug.tweenDataInfo(current, this.columns[1].x, this.columns[1].y);
        debug.tweenDataValues(current, this.columns[2].x, this.columns[2].y);
        this.debugText("game.debug.tween(tween, x, y)", 20, 80);
        this.debugText("game.debug.tweenInfo(tween, x, y)", this.columns[0].x, this.columns[0].y - 100);
        this.debugText("game.debug.tweenDataInfo(tweenData, x, y)", this.columns[0].x, this.columns[0].y - 75);
        this.debugText("game.debug.tweenDataValues(tweenData, x, y)", this.columns[0].x, this.columns[0].y - 50);
      },
      shutdown: function() {
        this.gui.destroy();
      },
      debugText: function(text, x, y, color) {
        var debug;
        if (color == null) {
          color = "#999";
        }
        debug = this.game.debug;
        debug.text(text, x, y, color, debug.font);
      }
    }
  });

}).call(this);
